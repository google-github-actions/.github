name: 'Draft release'

on:
  workflow_call:
    inputs:
      version_strategy:
        description: 'Version strategy: The strategy to used to update the version based on semantic versioning (more info at https://semver.org/).'
        required: true
        type: 'string'
    secrets:
      ACTIONS_BOT_TOKEN:
        required: true

env:
  PR_BRANCH: 'actions/draft-release-${{ github.ref_name }}'

jobs:
  draft-release:
    name: 'Draft Release'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v3'

      - uses: 'actions/setup-node@v3'
        with:
          node-version: '16.x'

      - name: 'Build and push'
        shell: 'bash'
        env:
          VERSION_STRATEGY: '${{ inputs.version_strategy }}'
        run: |-
          # configure username and email for git to show who made the changes
          git config user.name "google-github-actions-bot"
          git config user.email "github-actions-bot@google.com"

          git checkout -b $PR_BRANCH

          npm version $VERSION_STRATEGY --git-tag-version=false

          NEW_VERSION=$(cat package.json | jq -r .version)
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

          npm ci && npm run build

          git add .
          git commit -m "Release: v${NEW_VERSION}"
          git push origin $PR_BRANCH --force

      - name: 'Generate release notes'
        uses: 'actions/github-script@v6'
        with:
          script: |-
            let previousTagName = "";

            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              previousTagName = latestRelease.data.tag_name;
            } catch (err) {
              if (err["status"] !== 404) {
                core.setFailed(`Failed to load latest release: ${err}`);
              }

              core.info(`No existing releases found`);
            }

            try {
              const releaseNotesRequest = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: context.sha,
                target_commitish: context.sha,
              };

              if (previousTagName) {
                releaseNotesRequest.previous_tag_name = previousTagName;
              }

              const releaseNotes = await github.rest.repos.generateReleaseNotes(
                releaseNotesRequest
              );

              core.exportVariable("RELEASE_NOTES", releaseNotes.data.body)
            } catch (err) {
              core.setFailed(`Failed to generate release notes: ${err}`);
            }

      - name: 'Create Pull Request'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ secrets.ACTIONS_BOT_TOKEN }}'
          script: |-
            const tag = "v" + process.env.NEW_VERSION;

            try {
              const listResponse = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                head: context.repo.owner + ":" + process.env.PR_BRANCH,
                base: process.env.GITHUB_REF_NAME,
              });

              core.isDebug() && console.log(listResponse);

              if (!listResponse.data.length) {
                const createResponse = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: "Release: " + tag,
                  body: process.env.RELEASE_NOTES,
                  head: process.env.PR_BRANCH,
                  base: process.env.GITHUB_REF_NAME,
                });

                core.info(
                  `Created PR #${createResponse.data.number} at ${createResponse.data.html_url}`
                );
              } else {
                const updateResponse = await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: listResponse.data[0].number,
                  title: "Release: " + tag,
                  body: process.env.RELEASE_NOTES,
                });

                core.info(
                  `Updated PR #${updateResponse.data.number} at ${updateResponse.data.html_url}`
                );
              }
            } catch (err) {
              console.error(err);
              core.setFailed(`Failed to create pull request: ${err}`);
            }
