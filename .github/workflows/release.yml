name: 'Release'

on:
  workflow_call:

jobs:
  release:
    name: 'Release'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v3'

      - name: 'Get package version'
        run: |-
          echo "NEW_VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: 'Get previous release tag'
        uses: 'actions/github-script@v6'
        with:
          script: |-
            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              core.exportVariable("PREV_TAG", latestRelease.data.tag_name);
            } catch (err) {
              if (err["status"] === 404) {
                core.info(`No releases found`);
              } else {
                core.setFailed(`Failed to load latest release: ${err}`);
              }
            }

      - name: 'Create release'
        uses: 'actions/github-script@v6'
        with:
          script: |-
            const tag = `v${ process.env.NEW_VERSION }`;
            const previousTagName = `${ process.env.PREV_TAG }`;

            try {
              const createReleaseRequest = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                target_commitish: context.sha,
                name: tag,
                generate_release_notes: true,
              };

              const response = await github.rest.repos.createRelease(createReleaseRequest);

              core.info(
                `Created release ${response.data.name} at ${response.data.html_url}`
              );
            } catch (err) {
              core.setFailed(`Failed to create release: ${err}`);
            }

      - name: 'Update floating tag'
        uses: 'actions/github-script@v6'
        with:
          script: |-
            const tag = `v${ process.env.NEW_VERSION }`;
            const major = tag.split(".")[0];

            // Try to update the ref first. If that fails, it probably does not
            // exist yet, and we should create it.
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${major}`,
                sha: context.sha,
                force: true,
              });
              core.info(`Updated ${major} to ${context.sha}`);
            } catch (err) {
              core.warning(`Failed to create tag ${major}: ${err}`);

              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${major}`,
                sha: context.sha,
              });
              core.info(`Created ${major} at ${context.sha}`);
            }
